{"version":3,"sources":["../src/combobox.anatomy.ts","../src/combobox.connect.ts","../src/combobox.dom.ts","../src/combobox.machine.ts"],"sourcesContent":["import { createAnatomy } from \"@zag-js/anatomy\"\n\nexport const anatomy = createAnatomy(\"combobox\").parts(\n  \"root\",\n  \"label\",\n  \"input\",\n  \"positioner\",\n  \"control\",\n  \"trigger\",\n  \"content\",\n  \"clearTrigger\",\n  \"option\",\n  \"optionGroup\",\n)\nexport const parts = anatomy.build()\n","import { getEventKey, getNativeEvent, isLeftClick, type EventKeyMap } from \"@zag-js/dom-event\"\nimport { ariaAttr, dataAttr } from \"@zag-js/dom-query\"\nimport { getPlacementStyles } from \"@zag-js/popper\"\nimport type { NormalizeProps, PropTypes } from \"@zag-js/types\"\nimport { parts } from \"./combobox.anatomy\"\nimport { dom } from \"./combobox.dom\"\nimport type { OptionData, OptionGroupProps, OptionProps, PublicApi, Send, State } from \"./combobox.types\"\n\nexport function connect<T extends PropTypes>(state: State, send: Send, normalize: NormalizeProps<T>): PublicApi<T> {\n  const translations = state.context.translations\n\n  const isDisabled = state.context.disabled\n  const isInteractive = state.context.isInteractive\n  const isInvalid = state.context.invalid\n  const isReadOnly = state.context.readOnly\n\n  const isOpen = state.hasTag(\"open\")\n  const isFocused = state.hasTag(\"focused\")\n  const isIdle = state.hasTag(\"idle\")\n\n  const autofill = isOpen && state.context.navigationData && state.context.autoComplete\n  const showClearButton = (!isIdle || state.context.isHovering) && !state.context.isInputValueEmpty\n\n  const value = autofill ? state.context.navigationData?.label : state.context.inputValue\n\n  const popperStyles = getPlacementStyles({\n    placement: state.context.currentPlacement,\n  })\n\n  const api = {\n    isFocused,\n    isOpen,\n    isInputValueEmpty: state.context.isInputValueEmpty,\n    inputValue: state.context.inputValue,\n    focusedOption: state.context.focusedOptionData,\n    selectedValue: state.context.selectionData?.value,\n\n    setValue(value: string | OptionData) {\n      let data: OptionData\n      if (typeof value === \"string\") {\n        data = { value, label: dom.getValueLabel(state.context, value) }\n      } else {\n        data = value\n      }\n      send({ type: \"SET_VALUE\", ...data })\n    },\n\n    setInputValue(value: string) {\n      send({ type: \"SET_INPUT_VALUE\", value })\n    },\n\n    clearValue() {\n      send(\"CLEAR_VALUE\")\n    },\n\n    focus() {\n      dom.getInputEl(state.context)?.focus()\n    },\n\n    rootProps: normalize.element({\n      ...parts.root.attrs,\n      id: dom.getRootId(state.context),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n    }),\n\n    labelProps: normalize.label({\n      ...parts.label.attrs,\n      htmlFor: dom.getInputId(state.context),\n      id: dom.getLabelId(state.context),\n      \"data-readonly\": dataAttr(isReadOnly),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-focus\": dataAttr(isFocused),\n    }),\n\n    controlProps: normalize.element({\n      ...parts.control.attrs,\n      id: dom.getControlId(state.context),\n      \"data-state\": isOpen ? \"open\" : \"closed\",\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      onPointerOver() {\n        if (!isInteractive) return\n        send(\"POINTER_OVER\")\n      },\n      onPointerLeave() {\n        if (!isInteractive) return\n        send(\"POINTER_LEAVE\")\n      },\n    }),\n\n    positionerProps: normalize.element({\n      ...parts.positioner.attrs,\n      id: dom.getPositionerId(state.context),\n      hidden: !isOpen,\n      style: popperStyles.floating,\n    }),\n\n    inputProps: normalize.input({\n      ...parts.input.attrs,\n      \"aria-invalid\": ariaAttr(isInvalid),\n      \"data-invalid\": dataAttr(isInvalid),\n      name: state.context.name,\n      form: state.context.form,\n      disabled: isDisabled,\n      autoFocus: state.context.autoFocus,\n      autoComplete: \"off\",\n      autoCorrect: \"off\",\n      autoCapitalize: \"none\",\n      spellCheck: \"false\",\n      readOnly: isReadOnly,\n      placeholder: state.context.placeholder,\n      id: dom.getInputId(state.context),\n      type: \"text\",\n      role: \"combobox\",\n      defaultValue: value,\n      \"data-value\": value,\n      \"aria-autocomplete\": state.context.autoComplete ? \"both\" : \"list\",\n      \"aria-controls\": isOpen ? dom.getContentId(state.context) : undefined,\n      \"aria-expanded\": isOpen,\n      \"data-state\": isOpen ? \"open\" : \"closed\",\n      \"aria-activedescendant\": state.context.focusedId ?? undefined,\n      onClick() {\n        if (!isInteractive) return\n        send(\"CLICK_INPUT\")\n      },\n      onFocus() {\n        if (isDisabled) return\n        send(\"FOCUS\")\n      },\n      onChange(event) {\n        send({ type: \"CHANGE\", value: event.currentTarget.value })\n      },\n      onKeyDown(event) {\n        if (!isInteractive) return\n\n        const evt = getNativeEvent(event)\n        if (evt.ctrlKey || evt.shiftKey || evt.isComposing) return\n\n        let prevent = false\n\n        const keymap: EventKeyMap = {\n          ArrowDown(event) {\n            send(event.altKey ? \"ALT_ARROW_DOWN\" : \"ARROW_DOWN\")\n            prevent = true\n          },\n          ArrowUp() {\n            send(event.altKey ? \"ALT_ARROW_UP\" : \"ARROW_UP\")\n            prevent = true\n          },\n          Home(event) {\n            const isCtrlKey = event.ctrlKey || event.metaKey\n            if (isCtrlKey) return\n            send({ type: \"HOME\", preventDefault: () => event.preventDefault() })\n          },\n          End(event) {\n            const isCtrlKey = event.ctrlKey || event.metaKey\n            if (isCtrlKey) return\n            send({ type: \"END\", preventDefault: () => event.preventDefault() })\n          },\n          Enter() {\n            send(\"ENTER\")\n            prevent = true\n          },\n          Escape() {\n            send(\"ESCAPE\")\n            prevent = true\n          },\n          Tab() {\n            send(\"TAB\")\n          },\n        }\n\n        const key = getEventKey(event, state.context)\n        const exec = keymap[key]\n        exec?.(event)\n\n        if (prevent) {\n          event.preventDefault()\n        }\n      },\n    }),\n\n    triggerProps: normalize.button({\n      ...parts.trigger.attrs,\n      id: dom.getTriggerId(state.context),\n      \"aria-haspopup\": \"listbox\",\n      type: \"button\",\n      tabIndex: -1,\n      \"aria-label\": translations.triggerLabel,\n      \"aria-expanded\": isOpen,\n      \"data-state\": isOpen ? \"open\" : \"closed\",\n      \"aria-controls\": isOpen ? dom.getContentId(state.context) : undefined,\n      disabled: isDisabled,\n      \"data-readonly\": dataAttr(isReadOnly),\n      \"data-disabled\": dataAttr(isDisabled),\n      onPointerDown(event) {\n        const evt = getNativeEvent(event)\n        if (!isInteractive || !isLeftClick(evt) || evt.pointerType === \"touch\") return\n        send(\"CLICK_BUTTON\")\n        event.preventDefault()\n      },\n      onPointerUp(event) {\n        if (event.pointerType !== \"touch\") return\n        send(\"CLICK_BUTTON\")\n      },\n    }),\n\n    contentProps: normalize.element({\n      ...parts.content.attrs,\n      id: dom.getContentId(state.context),\n      role: \"listbox\",\n      hidden: !isOpen,\n      \"data-state\": isOpen ? \"open\" : \"closed\",\n      \"aria-labelledby\": dom.getLabelId(state.context),\n      onPointerDown(event) {\n        // prevent options or elements within listbox from taking focus\n        event.preventDefault()\n      },\n    }),\n\n    clearTriggerProps: normalize.button({\n      ...parts.clearTrigger.attrs,\n      id: dom.getClearTriggerId(state.context),\n      type: \"button\",\n      tabIndex: -1,\n      disabled: isDisabled,\n      \"aria-label\": translations.clearTriggerLabel,\n      hidden: !showClearButton,\n      onPointerDown(event) {\n        const evt = getNativeEvent(event)\n        if (!isInteractive || !isLeftClick(evt)) return\n        send(\"CLEAR_VALUE\")\n        event.preventDefault()\n      },\n    }),\n\n    getOptionState(props: OptionProps) {\n      const id = dom.getOptionId(state.context, props.value, props.index)\n      return {\n        isDisabled: !!props.disabled,\n        isHighlighted: state.context.focusedId === id,\n        isChecked: state.context.selectionData?.value === props.value,\n      }\n    },\n\n    getOptionProps(props: OptionProps) {\n      const { value, label, index, count } = props\n      const id = dom.getOptionId(state.context, value, index)\n      const optionState = api.getOptionState(props)\n\n      return normalize.element({\n        ...parts.option.attrs,\n        id,\n        role: \"option\",\n        tabIndex: -1,\n        \"data-highlighted\": dataAttr(optionState.isHighlighted),\n        \"data-state\": optionState.isChecked ? \"checked\" : \"unchecked\",\n        \"aria-selected\": optionState.isHighlighted,\n        \"aria-disabled\": optionState.isDisabled,\n        \"data-disabled\": dataAttr(optionState.isDisabled),\n        \"aria-posinset\": count && index != null ? index + 1 : undefined,\n        \"aria-setsize\": count,\n        \"data-value\": value,\n        \"data-label\": label,\n        // Prefer `pointermove` to `pointerenter` to avoid interrupting the keyboard navigation\n        // NOTE: for perf, we may want to move these handlers to the listbox\n        onPointerMove() {\n          if (optionState.isDisabled) return\n          send({ type: \"POINTEROVER_OPTION\", id, value, label })\n        },\n        onPointerUp() {\n          if (optionState.isDisabled) return\n          send({ type: \"CLICK_OPTION\", src: \"pointerup\", id, value, label })\n        },\n        onClick() {\n          if (optionState.isDisabled) return\n          send({ type: \"CLICK_OPTION\", src: \"click\", id, value, label })\n        },\n        onAuxClick(event) {\n          if (optionState.isDisabled) return\n          event.preventDefault()\n          send({ type: \"CLICK_OPTION\", src: \"auxclick\", id, value, label })\n        },\n      })\n    },\n\n    getOptionGroupProps(props: OptionGroupProps) {\n      const { label } = props\n      return normalize.element({\n        ...parts.optionGroup.attrs,\n        role: \"group\",\n        \"aria-label\": label,\n      })\n    },\n  }\n\n  return api\n}\n","import { createScope, nextById, prevById, queryAll } from \"@zag-js/dom-query\"\nimport { first, last } from \"@zag-js/utils\"\nimport type { MachineContext as Ctx } from \"./combobox.types\"\n\nexport const dom = createScope({\n  getRootId: (ctx: Ctx) => ctx.ids?.root ?? `combobox:${ctx.id}`,\n  getLabelId: (ctx: Ctx) => ctx.ids?.label ?? `combobox:${ctx.id}:label`,\n  getControlId: (ctx: Ctx) => ctx.ids?.control ?? `combobox:${ctx.id}:control`,\n  getInputId: (ctx: Ctx) => ctx.ids?.input ?? `combobox:${ctx.id}:input`,\n  getContentId: (ctx: Ctx) => ctx.ids?.content ?? `combobox:${ctx.id}:listbox`,\n  getPositionerId: (ctx: Ctx) => ctx.ids?.positioner ?? `combobox:${ctx.id}:popper`,\n  getTriggerId: (ctx: Ctx) => ctx.ids?.trigger ?? `combobox:${ctx.id}:toggle-btn`,\n  getClearTriggerId: (ctx: Ctx) => ctx.ids?.clearTrigger ?? `combobox:${ctx.id}:clear-btn`,\n  getOptionId: (ctx: Ctx, id: string, index?: number) =>\n    ctx.ids?.option?.(id, index) ?? [`combobox:${ctx.id}:option:${id}`, index].filter((v) => v != null).join(\":\"),\n\n  getActiveOptionEl: (ctx: Ctx) => (ctx.focusedId ? dom.getById(ctx, ctx.focusedId) : null),\n  getContentEl: (ctx: Ctx) => dom.getById(ctx, dom.getContentId(ctx)),\n  getInputEl: (ctx: Ctx) => dom.getById<HTMLInputElement>(ctx, dom.getInputId(ctx)),\n  getPositionerEl: (ctx: Ctx) => dom.getById(ctx, dom.getPositionerId(ctx)),\n  getControlEl: (ctx: Ctx) => dom.getById(ctx, dom.getControlId(ctx)),\n  getTriggerEl: (ctx: Ctx) => dom.getById(ctx, dom.getTriggerId(ctx)),\n  getClearTriggerEl: (ctx: Ctx) => dom.getById(ctx, dom.getClearTriggerId(ctx)),\n\n  getElements: (ctx: Ctx) => queryAll(dom.getContentEl(ctx), \"[role=option]:not([aria-disabled=true])\"),\n  getFocusedOptionEl: (ctx: Ctx) => {\n    if (!ctx.focusedId) return null\n    const selector = `[role=option][id=${CSS.escape(ctx.focusedId)}]`\n    return dom.getContentEl(ctx)?.querySelector<HTMLElement>(selector)\n  },\n\n  getFirstEl: (ctx: Ctx) => first(dom.getElements(ctx)),\n  getLastEl: (ctx: Ctx) => last(dom.getElements(ctx)),\n  getPrevEl: (ctx: Ctx, id: string) => prevById(dom.getElements(ctx), id, ctx.loop),\n  getNextEl: (ctx: Ctx, id: string) => nextById(dom.getElements(ctx), id, ctx.loop),\n\n  isInputFocused: (ctx: Ctx) => dom.getDoc(ctx).activeElement === dom.getInputEl(ctx),\n  getOptionData: (el: HTMLElement | null | undefined) => ({\n    value: el?.getAttribute(\"data-value\") ?? \"\",\n    label: el?.getAttribute(\"data-label\") ?? \"\",\n  }),\n  getOptionCount: (ctx: Ctx) => {\n    // if option has `aria-setsize`, announce the number of options\n    const listbox = dom.getContentEl(ctx)\n    const count = listbox?.querySelector(\"[role=option]\")?.getAttribute(\"aria-setsize\")\n\n    if (count != null) return parseInt(count)\n    // else announce the number of options by querying the listbox\n    return listbox?.querySelectorAll(\"[role=option]\").length ?? 0\n  },\n  getMatchingOptionEl: (ctx: Ctx, value: string | null | undefined) => {\n    if (!value) return null\n\n    const selector = `[role=option][data-value=\"${CSS.escape(value)}\"`\n\n    const listbox = dom.getContentEl(ctx)\n    if (!listbox) return null\n\n    return listbox.querySelector<HTMLElement>(selector)\n  },\n\n  focusInput: (ctx: Ctx) => {\n    const input = dom.getInputEl(ctx)\n    if (dom.getDoc(ctx).activeElement !== input) {\n      input?.focus()\n    }\n    if (ctx.selectInputOnFocus) {\n      input?.select()\n    }\n  },\n\n  getClosestSectionLabel(ctx: Ctx) {\n    if (!ctx.focusedId) return\n    const group = dom.getActiveOptionEl(ctx)?.closest(\"[data-part=option-group]\")\n    return group?.getAttribute(\"aria-label\")\n  },\n\n  getValueLabel: (ctx: Ctx, value: string) => {\n    const el = dom.getMatchingOptionEl(ctx, value)\n    return dom.getOptionData(el).label\n  },\n})\n","import { ariaHidden } from \"@zag-js/aria-hidden\"\nimport { createMachine, guards } from \"@zag-js/core\"\nimport { contains, raf } from \"@zag-js/dom-query\"\nimport { observeAttributes, observeChildren } from \"@zag-js/mutation-observer\"\nimport { trackInteractOutside } from \"@zag-js/interact-outside\"\nimport { createLiveRegion } from \"@zag-js/live-region\"\nimport { getPlacement } from \"@zag-js/popper\"\nimport { compact } from \"@zag-js/utils\"\nimport { dom } from \"./combobox.dom\"\nimport type { MachineContext, MachineState, UserDefinedContext } from \"./combobox.types\"\n\nconst { and, not } = guards\n\nexport function machine(userContext: UserDefinedContext) {\n  const ctx = compact(userContext)\n  return createMachine<MachineContext, MachineState>(\n    {\n      id: \"combobox\",\n      initial: ctx.autoFocus ? \"focused\" : \"idle\",\n      context: {\n        loop: true,\n        openOnClick: false,\n        ariaHidden: true,\n\n        focusedId: null,\n        focusedOptionData: null,\n        navigationData: null,\n        selectionData: null,\n\n        inputValue: \"\",\n\n        liveRegion: null,\n        focusOnClear: true,\n        selectInputOnFocus: false,\n        selectOnTab: true,\n        isHovering: false,\n        isKeyboardEvent: false,\n        allowCustomValue: false,\n        isCustomValue: (data) => data.inputValue !== data.previousValue,\n        inputBehavior: \"none\",\n        selectionBehavior: \"set\",\n        ...ctx,\n        positioning: {\n          placement: \"bottom\",\n          flip: false,\n          sameWidth: true,\n          ...ctx.positioning,\n        },\n        translations: {\n          triggerLabel: \"Toggle suggestions\",\n          clearTriggerLabel: \"Clear value\",\n          navigationHint: \"use the up and down keys to navigate. Press the enter key to select\",\n          countAnnouncement: (count) => `${count} ${count === 1 ? \"option\" : \"options\"} available`,\n          ...ctx.translations,\n        },\n      },\n\n      computed: {\n        isInputValueEmpty: (ctx) => ctx.inputValue.length === 0,\n        isInteractive: (ctx) => !(ctx.readOnly || ctx.disabled),\n        autoComplete: (ctx) => ctx.inputBehavior === \"autocomplete\",\n        autoHighlight: (ctx) => ctx.inputBehavior === \"autohighlight\",\n      },\n\n      watch: {\n        inputValue: \"invokeOnInputChange\",\n        navigationData: \"invokeOnHighlight\",\n        selectionData: [\"invokeOnSelect\", \"blurInputIfNeeded\"],\n        focusedId: \"setSectionLabel\",\n      },\n\n      entry: [\"setupLiveRegion\"],\n      exit: [\"removeLiveRegion\"],\n\n      activities: [\"syncInputValue\"],\n\n      on: {\n        SET_VALUE: {\n          actions: [\"setInputValue\", \"setSelectionData\"],\n        },\n        SET_INPUT_VALUE: {\n          actions: \"setInputValue\",\n        },\n        CLEAR_VALUE: [\n          {\n            guard: \"focusOnClear\",\n            target: \"focused\",\n            actions: [\"clearInputValue\", \"clearSelectedValue\"],\n          },\n          {\n            actions: [\"clearInputValue\", \"clearSelectedValue\"],\n          },\n        ],\n        POINTER_OVER: {\n          actions: \"setIsHovering\",\n        },\n        POINTER_LEAVE: {\n          actions: \"clearIsHovering\",\n        },\n      },\n\n      states: {\n        idle: {\n          tags: [\"idle\"],\n          entry: [\"scrollToTop\", \"clearFocusedOption\"],\n          on: {\n            CLICK_BUTTON: {\n              target: \"interacting\",\n              actions: [\"focusInput\", \"invokeOnOpen\"],\n            },\n            CLICK_INPUT: {\n              guard: \"openOnClick\",\n              target: \"interacting\",\n              actions: \"invokeOnOpen\",\n            },\n            FOCUS: \"focused\",\n          },\n        },\n\n        focused: {\n          tags: [\"focused\"],\n          entry: [\"focusInput\", \"scrollToTop\", \"clearFocusedOption\"],\n          activities: [\"trackInteractOutside\"],\n          on: {\n            CHANGE: {\n              target: \"suggesting\",\n              actions: \"setInputValue\",\n            },\n            BLUR: \"idle\",\n            ESCAPE: {\n              guard: and(\"isCustomValue\", not(\"allowCustomValue\")),\n              actions: \"revertInputValue\",\n            },\n            CLICK_INPUT: {\n              guard: \"openOnClick\",\n              target: \"interacting\",\n              actions: [\"focusInput\", \"invokeOnOpen\"],\n            },\n            CLICK_BUTTON: {\n              target: \"interacting\",\n              actions: [\"focusInput\", \"invokeOnOpen\"],\n            },\n            POINTER_OVER: {\n              actions: \"setIsHovering\",\n            },\n            ARROW_UP: [\n              {\n                guard: \"autoComplete\",\n                target: \"interacting\",\n                actions: \"invokeOnOpen\",\n              },\n              {\n                target: \"interacting\",\n                actions: [\"focusLastOption\", \"invokeOnOpen\"],\n              },\n            ],\n            ARROW_DOWN: [\n              {\n                guard: \"autoComplete\",\n                target: \"interacting\",\n                actions: \"invokeOnOpen\",\n              },\n              {\n                target: \"interacting\",\n                actions: [\"focusFirstOption\", \"invokeOnOpen\"],\n              },\n            ],\n            ALT_ARROW_DOWN: {\n              target: \"interacting\",\n              actions: [\"focusInput\", \"invokeOnOpen\"],\n            },\n          },\n        },\n\n        suggesting: {\n          tags: [\"open\", \"focused\"],\n          activities: [\n            \"trackInteractOutside\",\n            \"scrollOptionIntoView\",\n            \"computePlacement\",\n            \"trackOptionNodes\",\n            \"hideOtherElements\",\n          ],\n          entry: [\"focusInput\", \"invokeOnOpen\"],\n          on: {\n            ARROW_DOWN: {\n              target: \"interacting\",\n              actions: \"focusNextOption\",\n            },\n            ARROW_UP: {\n              target: \"interacting\",\n              actions: \"focusPrevOption\",\n            },\n            ALT_ARROW_UP: \"focused\",\n            HOME: {\n              target: \"interacting\",\n              actions: [\"focusFirstOption\", \"preventDefault\"],\n            },\n            END: {\n              target: \"interacting\",\n              actions: [\"focusLastOption\", \"preventDefault\"],\n            },\n            ENTER: [\n              {\n                guard: and(\"hasFocusedOption\", \"autoComplete\"),\n                target: \"focused\",\n                actions: \"selectActiveOption\",\n              },\n              {\n                guard: \"hasFocusedOption\",\n                target: \"focused\",\n                actions: \"selectOption\",\n              },\n            ],\n            CHANGE: [\n              {\n                guard: \"autoHighlight\",\n                actions: [\"clearFocusedOption\", \"setInputValue\", \"focusFirstOption\"],\n              },\n              {\n                actions: [\"clearFocusedOption\", \"setInputValue\"],\n              },\n            ],\n            ESCAPE: {\n              target: \"focused\",\n              actions: \"invokeOnClose\",\n            },\n            POINTEROVER_OPTION: [\n              {\n                guard: \"autoComplete\",\n                target: \"interacting\",\n                actions: \"setActiveOption\",\n              },\n              {\n                target: \"interacting\",\n                actions: [\"setActiveOption\", \"setNavigationData\"],\n              },\n            ],\n            BLUR: {\n              target: \"idle\",\n              actions: \"invokeOnClose\",\n            },\n            CLICK_BUTTON: {\n              target: \"focused\",\n              actions: \"invokeOnClose\",\n            },\n            CLICK_OPTION: {\n              target: \"focused\",\n              actions: [\"selectOption\", \"invokeOnClose\"],\n            },\n          },\n        },\n\n        interacting: {\n          tags: [\"open\", \"focused\"],\n          activities: [\"scrollOptionIntoView\", \"trackInteractOutside\", \"computePlacement\", \"hideOtherElements\"],\n          entry: \"focusMatchingOption\",\n          on: {\n            HOME: {\n              actions: [\"focusFirstOption\", \"preventDefault\"],\n            },\n            END: {\n              actions: [\"focusLastOption\", \"preventDefault\"],\n            },\n            ARROW_DOWN: [\n              {\n                guard: and(\"autoComplete\", \"isLastOptionFocused\"),\n                actions: [\"clearFocusedOption\", \"scrollToTop\"],\n              },\n              { actions: \"focusNextOption\" },\n            ],\n            ARROW_UP: [\n              {\n                guard: and(\"autoComplete\", \"isFirstOptionFocused\"),\n                actions: \"clearFocusedOption\",\n              },\n              {\n                actions: \"focusPrevOption\",\n              },\n            ],\n            ALT_UP: {\n              target: \"focused\",\n              actions: [\"selectOption\", \"invokeOnClose\"],\n            },\n            CLEAR_FOCUS: {\n              actions: \"clearFocusedOption\",\n            },\n            TAB: {\n              guard: \"selectOnTab\",\n              target: \"idle\",\n              actions: [\"selectOption\", \"invokeOnClose\"],\n            },\n            ENTER: {\n              target: \"focused\",\n              actions: [\"selectOption\", \"invokeOnClose\"],\n            },\n            CHANGE: [\n              {\n                guard: \"autoComplete\",\n                target: \"suggesting\",\n                actions: [\"commitNavigationData\", \"setInputValue\"],\n              },\n              {\n                target: \"suggesting\",\n                actions: [\"clearFocusedOption\", \"setInputValue\"],\n              },\n            ],\n            POINTEROVER_OPTION: [\n              {\n                guard: \"autoComplete\",\n                actions: \"setActiveOption\",\n              },\n              {\n                actions: [\"setActiveOption\", \"setNavigationData\"],\n              },\n            ],\n            CLICK_OPTION: {\n              target: \"focused\",\n              actions: [\"selectOption\", \"invokeOnClose\"],\n            },\n            ESCAPE: {\n              target: \"focused\",\n              actions: \"invokeOnClose\",\n            },\n            CLICK_BUTTON: {\n              target: \"focused\",\n              actions: \"invokeOnClose\",\n            },\n            BLUR: {\n              target: \"idle\",\n              actions: \"invokeOnClose\",\n            },\n          },\n        },\n      },\n    },\n\n    {\n      guards: {\n        openOnClick: (ctx) => !!ctx.openOnClick,\n        isInputValueEmpty: (ctx) => ctx.isInputValueEmpty,\n        focusOnClear: (ctx) => !!ctx.focusOnClear,\n        autoFocus: (ctx) => !!ctx.autoFocus,\n        autoComplete: (ctx) => ctx.autoComplete,\n        autoHighlight: (ctx) => ctx.autoHighlight,\n        isFirstOptionFocused: (ctx) => dom.getFirstEl(ctx)?.id === ctx.focusedId,\n        isLastOptionFocused: (ctx) => dom.getLastEl(ctx)?.id === ctx.focusedId,\n        isCustomValue: (ctx) =>\n          !!ctx.isCustomValue?.({ inputValue: ctx.inputValue, previousValue: ctx.selectionData?.value }),\n        allowCustomValue: (ctx) => !!ctx.allowCustomValue,\n        hasFocusedOption: (ctx) => !!ctx.focusedId,\n        selectOnTab: (ctx) => !!ctx.selectOnTab,\n      },\n\n      activities: {\n        syncInputValue: (ctx) => {\n          const inputEl = dom.getInputEl(ctx)\n          if (!inputEl) return\n          return observeAttributes(inputEl, [\"data-value\"], () => {\n            inputEl.value = inputEl.dataset.value || \"\"\n          })\n        },\n        trackInteractOutside(ctx, _evt, { send }) {\n          return trackInteractOutside(dom.getInputEl(ctx), {\n            exclude(target) {\n              const ignore = [dom.getContentEl(ctx), dom.getTriggerEl(ctx)]\n              return ignore.some((el) => contains(el, target))\n            },\n            onInteractOutside(event) {\n              ctx.onInteractOutside?.(event)\n              if (event.defaultPrevented) return\n              send({ type: \"BLUR\", src: \"interact-outside\" })\n            },\n          })\n        },\n        hideOtherElements(ctx) {\n          if (!ctx.ariaHidden) return\n          return ariaHidden([dom.getInputEl(ctx), dom.getContentEl(ctx), dom.getTriggerEl(ctx)])\n        },\n        computePlacement(ctx) {\n          ctx.currentPlacement = ctx.positioning.placement\n          return getPlacement(dom.getControlEl(ctx), dom.getPositionerEl(ctx), {\n            ...ctx.positioning,\n            onComplete(data) {\n              ctx.currentPlacement = data.placement\n            },\n            onCleanup() {\n              ctx.currentPlacement = undefined\n            },\n          })\n        },\n        // in event the options are fetched (async), we still want to auto-highlight the first option\n        trackOptionNodes(ctx, evt, meta) {\n          if (!ctx.autoHighlight) return\n          const focusFirstOption = meta.getAction(\"focusFirstOption\")\n          const exec = () => focusFirstOption(ctx, evt, meta)\n          exec()\n          return observeChildren(dom.getContentEl(ctx), exec)\n        },\n        scrollOptionIntoView(ctx, _evt, { getState }) {\n          const inputEl = dom.getInputEl(ctx)\n          return observeAttributes(inputEl, [\"aria-activedescendant\"], () => {\n            const evt = getState().event\n            const isKeyboardEvent = /(ARROW_UP|ARROW_DOWN|HOME|END|TAB)/.test(evt.type)\n            if (!isKeyboardEvent) return\n\n            const option = dom.getActiveOptionEl(ctx)\n            option?.scrollIntoView({ block: \"nearest\" })\n\n            if (ctx.autoComplete) {\n              dom.focusInput(ctx)\n            }\n          })\n        },\n      },\n\n      actions: {\n        setupLiveRegion(ctx) {\n          ctx.liveRegion = createLiveRegion({\n            level: \"assertive\",\n            document: dom.getDoc(ctx),\n          })\n        },\n        removeLiveRegion(ctx) {\n          ctx.liveRegion?.destroy()\n        },\n        setActiveOption(ctx, evt) {\n          const { label, id, value } = evt\n          ctx.focusedId = id\n          ctx.focusedOptionData = { label, value }\n        },\n        setNavigationData(ctx, evt) {\n          const { label, value } = evt\n          ctx.navigationData = { label, value }\n        },\n        clearNavigationData(ctx) {\n          ctx.navigationData = null\n        },\n        commitNavigationData(ctx) {\n          if (!ctx.navigationData) return\n          ctx.inputValue = ctx.navigationData.label\n          ctx.navigationData = null\n        },\n        clearFocusedOption(ctx) {\n          ctx.focusedId = null\n          ctx.focusedOptionData = null\n          ctx.navigationData = null\n        },\n        selectActiveOption(ctx) {\n          if (!ctx.focusedOptionData) return\n          ctx.selectionData = ctx.focusedOptionData\n          ctx.inputValue = ctx.focusedOptionData.label\n        },\n        selectOption(ctx, evt) {\n          const isOptionEvent = !!evt.value && !!evt.label\n\n          ctx.selectionData = isOptionEvent\n            ? {\n                label: evt.label,\n                value: evt.value,\n              }\n            : ctx.navigationData\n\n          let value: string | undefined\n\n          if (!ctx.selectionData) return\n\n          if (ctx.selectionBehavior === \"set\") {\n            value = ctx.selectionData!.label\n          }\n          if (ctx.selectionBehavior === \"clear\") {\n            value = \"\"\n          }\n          if (value != null) {\n            ctx.inputValue = value\n          }\n        },\n        blurInputIfNeeded(ctx) {\n          if (ctx.autoComplete || !ctx.blurOnSelect) return\n          raf(() => {\n            dom.getInputEl(ctx)?.blur()\n          })\n        },\n        focusInput(ctx, evt) {\n          if (evt.type === \"CHANGE\") return\n          dom.focusInput(ctx)\n        },\n        setInputValue(ctx, evt) {\n          const value = evt.type === \"SET_VALUE\" ? evt.label : evt.value\n          ctx.inputValue = value\n        },\n        clearInputValue(ctx) {\n          ctx.inputValue = \"\"\n        },\n        revertInputValue(ctx) {\n          if (!ctx.selectionData) return\n          ctx.inputValue = ctx.selectionData.label\n        },\n        setSelectionData(ctx, evt) {\n          const { label, value } = evt\n          ctx.selectionData = { label, value }\n        },\n        clearSelectedValue(ctx) {\n          ctx.selectionData = null\n        },\n        scrollToTop(ctx) {\n          const listbox = dom.getContentEl(ctx)\n          if (!listbox) return\n          listbox.scrollTop = 0\n        },\n        invokeOnInputChange(ctx) {\n          ctx.onInputChange?.({ value: ctx.inputValue })\n        },\n        invokeOnHighlight(ctx) {\n          const { label, value } = ctx.navigationData ?? {}\n          const relatedTarget = dom.getMatchingOptionEl(ctx, value)\n          ctx.onHighlight?.({ label, value, relatedTarget })\n        },\n        invokeOnSelect(ctx) {\n          const { label, value } = ctx.selectionData ?? {}\n          const relatedTarget = dom.getMatchingOptionEl(ctx, value)\n          ctx.onSelect?.({ label, value, relatedTarget })\n        },\n        invokeOnOpen(ctx) {\n          ctx.onOpen?.()\n        },\n        invokeOnClose(ctx) {\n          ctx.onClose?.()\n        },\n        highlightFirstOption(ctx) {\n          raf(() => {\n            setHighlight(ctx, dom.getFirstEl(ctx))\n          })\n        },\n        focusFirstOption(ctx) {\n          raf(() => {\n            setFocus(ctx, dom.getFirstEl(ctx))\n          })\n        },\n        focusLastOption(ctx) {\n          raf(() => {\n            setFocus(ctx, dom.getLastEl(ctx))\n          })\n        },\n        focusNextOption(ctx) {\n          raf(() => {\n            const option = dom.getNextEl(ctx, ctx.focusedId ?? \"\")\n            setFocus(ctx, option)\n          })\n        },\n        focusPrevOption(ctx) {\n          raf(() => {\n            const option = dom.getPrevEl(ctx, ctx.focusedId ?? \"\")\n            setFocus(ctx, option)\n          })\n        },\n        focusMatchingOption(ctx) {\n          raf(() => {\n            const option = dom.getMatchingOptionEl(ctx, ctx.selectionData?.value)\n            option?.scrollIntoView({ block: \"nearest\" })\n            setFocus(ctx, option)\n          })\n        },\n        announceOptionCount(ctx) {\n          raf(() => {\n            const count = dom.getOptionCount(ctx)\n            if (!count) return\n            const text = ctx.translations.countAnnouncement(count)\n            ctx.liveRegion?.announce(text)\n          })\n        },\n        setIsHovering(ctx) {\n          ctx.isHovering = true\n        },\n        clearIsHovering(ctx) {\n          ctx.isHovering = false\n        },\n        preventDefault(_ctx, evt) {\n          evt.preventDefault()\n        },\n        setSectionLabel(ctx) {\n          const label = dom.getClosestSectionLabel(ctx)\n          if (!label) return\n          ctx.sectionLabel = label\n        },\n      },\n    },\n  )\n}\n\nfunction setHighlight(ctx: MachineContext, option: HTMLElement | undefined | null) {\n  if (!option) return\n  const data = dom.getOptionData(option)\n  ctx.focusedId = option.id\n  ctx.focusedOptionData = data\n  return data\n}\n\nfunction setFocus(ctx: MachineContext, option: HTMLElement | undefined | null) {\n  if (!option || option.id === ctx.focusedId) return\n  const data = setHighlight(ctx, option)\n  ctx.navigationData = data!\n}\n"],"mappings":"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","names":["value","event","ctx"]}