import * as _zag_js_anatomy from '@zag-js/anatomy';
import { PropTypes, RequiredBy, DirectionProperty, CommonProperties, Context, NormalizeProps } from '@zag-js/types';
import * as _zag_js_core from '@zag-js/core';
import { StateMachine } from '@zag-js/core';

declare const anatomy: _zag_js_anatomy.AnatomyInstance<"root" | "input" | "label" | "control" | "thumb">;

type ElementIds = Partial<{
    root: string;
    input: string;
    control: string;
    label: string;
    thumb: string;
}>;
type PublicContext = DirectionProperty & CommonProperties & {
    /**
     * The ids of the elements in the switch. Useful for composition.
     */
    ids?: ElementIds;
    /**
     * Specifies the localized strings that identifies the accessibility elements and their states
     */
    label: string;
    /**
     * Whether the switch is disabled.
     */
    disabled?: boolean;
    /**
     * If `true` and `disabled` is passed, the switch will
     * remain tabbable but not interactive
     */
    focusable?: boolean;
    /**
     * If `true`, the switch will be readonly
     */
    readOnly?: boolean;
    /**
     * If `true`, the switch is marked as invalid.
     */
    invalid?: boolean;
    /**
     * If `true`, the switch input is marked as required,
     */
    required?: boolean;
    /**
     * Function to call when the switch is clicked.
     */
    onChange?: (details: {
        checked: boolean;
    }) => void;
    /**
     * Whether the switch is checked.
     */
    checked: boolean;
    /**
     * The name of the input field in a switch
     * (Useful for form submission).
     */
    name?: string;
    /**
     * The id of the form that the switch belongs to
     */
    form?: string;
    /**
     * The value of switch input. Useful for form submission.
     * @default "on"
     */
    value?: string | number;
};
type PublicApi<T extends PropTypes = PropTypes> = {
    /**
     * Whether the checkbox is checked
     */
    isChecked: boolean;
    /**
     * Whether the checkbox is disabled
     */
    isDisabled: boolean | undefined;
    /**
     * Whether the checkbox is focused
     */
    isFocused: boolean | undefined;
    /**
     * Function to set the checked state of the switch.
     */
    setChecked(checked: boolean): void;
    /**
     * Function to toggle the checked state of the checkbox
     */
    toggleChecked(): void;
    rootProps: T["label"];
    labelProps: T["element"];
    thumbProps: T["element"];
    controlProps: T["element"];
    inputProps: T["input"];
};
type UserDefinedContext = RequiredBy<PublicContext, "id">;
type ComputedContext = Readonly<{}>;
type PrivateContext = Context<{}>;
type MachineContext = PublicContext & PrivateContext & ComputedContext;
type MachineState = {
    value: "ready";
};
type State = StateMachine.State<MachineContext, MachineState>;
type Send = StateMachine.Send<StateMachine.AnyEventObject>;

declare function connect<T extends PropTypes>(state: State, send: Send, normalize: NormalizeProps<T>): PublicApi<T>;

declare function machine(userContext: UserDefinedContext): _zag_js_core.Machine<MachineContext, MachineState, _zag_js_core.StateMachine.AnyEventObject>;

export { UserDefinedContext as Context, PublicApi, anatomy, connect, machine };
