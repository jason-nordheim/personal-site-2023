"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  anatomy: () => anatomy,
  connect: () => connect,
  machine: () => machine
});
module.exports = __toCommonJS(src_exports);

// src/range-slider.anatomy.ts
var import_slider = require("@zag-js/slider");
var anatomy = import_slider.anatomy;
var parts = anatomy.build();

// src/range-slider.connect.ts
var import_dom_event2 = require("@zag-js/dom-event");
var import_dom_query2 = require("@zag-js/dom-query");
var import_numeric_range3 = require("@zag-js/numeric-range");

// src/range-slider.dom.ts
var import_dom_event = require("@zag-js/dom-event");
var import_dom_query = require("@zag-js/dom-query");
var import_form_utils = require("@zag-js/form-utils");
var import_numeric_range = require("@zag-js/numeric-range");

// src/range-slider.style.ts
var import_slider2 = require("@zag-js/slider");
function getBounds(value) {
  const firstValue = value[0];
  const lastThumb = value[value.length - 1];
  return [firstValue, lastThumb];
}
function getRangeOffsets(ctx) {
  const [firstPercent, lastPercent] = getBounds(ctx.valuePercent);
  return { start: `${firstPercent}%`, end: `${100 - lastPercent}%` };
}
function getVisibility(ctx) {
  let visibility = "visible";
  if (ctx.thumbAlignment === "contain" && !ctx.hasMeasuredThumbSize) {
    visibility = "hidden";
  }
  return visibility;
}
function getThumbStyle(ctx, index) {
  const placementProp = ctx.isVertical ? "bottom" : ctx.isRtl ? "right" : "left";
  return {
    visibility: getVisibility(ctx),
    position: "absolute",
    transform: "var(--slider-thumb-transform)",
    [placementProp]: `var(--slider-thumb-offset-${index})`
  };
}
function getRootStyle(ctx) {
  const range = getRangeOffsets(ctx);
  const offsetStyles = ctx.value.reduce((styles, value, index) => {
    const thumbSize = ctx.thumbSizes[index] ?? { width: 0, height: 0 };
    const offset = import_slider2.unstable__dom.getThumbOffset({ ...ctx, value, thumbSize });
    return { ...styles, [`--slider-thumb-offset-${index}`]: offset };
  }, {});
  return {
    ...offsetStyles,
    "--slider-thumb-transform": ctx.isVertical ? "translateY(50%)" : "translateX(-50%)",
    "--slider-range-start": range.start,
    "--slider-range-end": range.end
  };
}
var styleGetterFns = {
  getRootStyle,
  getControlStyle: import_slider2.unstable__dom.getControlStyle,
  getThumbStyle,
  getRangeStyle: import_slider2.unstable__dom.getRangeStyle,
  getMarkerStyle: import_slider2.unstable__dom.getMarkerStyle,
  getMarkerGroupStyle: import_slider2.unstable__dom.getMarkerGroupStyle
};

// src/range-slider.dom.ts
var dom = (0, import_dom_query.createScope)({
  ...styleGetterFns,
  getRootId: (ctx) => ctx.ids?.root ?? `slider:${ctx.id}`,
  getThumbId: (ctx, index) => ctx.ids?.thumb?.(index) ?? `slider:${ctx.id}:thumb:${index}`,
  getHiddenInputId: (ctx, index) => `slider:${ctx.id}:input:${index}`,
  getControlId: (ctx) => ctx.ids?.control ?? `slider:${ctx.id}:control`,
  getTrackId: (ctx) => ctx.ids?.track ?? `slider:${ctx.id}:track`,
  getRangeId: (ctx) => ctx.ids?.range ?? `slider:${ctx.id}:range`,
  getLabelId: (ctx) => ctx.ids?.label ?? `slider:${ctx.id}:label`,
  getOutputId: (ctx) => ctx.ids?.output ?? `slider:${ctx.id}:output`,
  getMarkerId: (ctx, value) => ctx.ids?.marker?.(value) ?? `slider:${ctx.id}:marker:${value}`,
  getRootEl: (ctx) => dom.getById(ctx, dom.getRootId(ctx)),
  getThumbEl: (ctx, index) => dom.getById(ctx, dom.getThumbId(ctx, index)),
  getHiddenInputEl: (ctx, index) => dom.getById(ctx, dom.getHiddenInputId(ctx, index)),
  getControlEl: (ctx) => dom.queryById(ctx, dom.getControlId(ctx)),
  getElements: (ctx) => (0, import_dom_query.queryAll)(dom.getControlEl(ctx), "[role=slider]"),
  getFirstEl: (ctx) => dom.getElements(ctx)[0],
  getRangeEl: (ctx) => dom.getById(ctx, dom.getRangeId(ctx)),
  getValueFromPoint(ctx, point) {
    const relativePoint = (0, import_dom_event.getRelativePoint)(point, dom.getControlEl(ctx));
    const percent = relativePoint.getPercentValue({
      orientation: ctx.orientation,
      dir: ctx.dir,
      inverted: { y: true }
    });
    return (0, import_numeric_range.getPercentValue)(percent, ctx.min, ctx.max, ctx.step);
  },
  dispatchChangeEvent(ctx) {
    const valueArray = Array.from(ctx.value);
    valueArray.forEach((value, index) => {
      const inputEl = dom.getHiddenInputEl(ctx, index);
      if (!inputEl)
        return;
      (0, import_form_utils.dispatchInputValueEvent)(inputEl, { value });
    });
  }
});

// src/range-slider.utils.ts
var import_numeric_range2 = require("@zag-js/numeric-range");
function normalizeValues(ctx, nextValues) {
  return nextValues.map((value, index, values) => {
    return constrainValue({ ...ctx, value: values }, value, index);
  });
}
function getRangeAtIndex(ctx, index) {
  return (0, import_numeric_range2.getValueRanges)(ctx.value, ctx.min, ctx.max, ctx.minStepsBetweenThumbs)[index];
}
function constrainValue(ctx, value, index) {
  const range = getRangeAtIndex(ctx, index);
  const snapValue = (0, import_numeric_range2.snapValueToStep)(value, ctx.min, ctx.max, ctx.step);
  return (0, import_numeric_range2.clampValue)(snapValue, range.min, range.max);
}
function decrement(ctx, index, step) {
  const idx = index ?? ctx.activeIndex;
  const range = getRangeAtIndex(ctx, idx);
  return (0, import_numeric_range2.getPreviousStepValue)(idx, {
    ...range,
    step: step ?? ctx.step,
    values: ctx.value
  });
}
function increment(ctx, index, step) {
  const idx = index ?? ctx.activeIndex;
  const range = getRangeAtIndex(ctx, idx);
  return (0, import_numeric_range2.getNextStepValue)(idx, {
    ...range,
    step: step ?? ctx.step,
    values: ctx.value
  });
}
function getClosestIndex(ctx, pointValue) {
  return (0, import_numeric_range2.getClosestValueIndex)(ctx.value, pointValue);
}
function assignArray(current, next) {
  for (let i = 0; i < next.length; i++) {
    const value = next[i];
    current[i] = value;
  }
}

// src/range-slider.connect.ts
function connect(state, send, normalize) {
  const ariaLabel = state.context["aria-label"];
  const ariaLabelledBy = state.context["aria-labelledby"];
  const sliderValue = state.context.value;
  const isFocused = state.matches("focus");
  const isDragging = state.matches("dragging");
  const isDisabled = state.context.disabled;
  const isInvalid = state.context.invalid;
  const isInteractive = state.context.isInteractive;
  function getValuePercentFn(value) {
    return (0, import_numeric_range3.getValuePercent)(value, state.context.min, state.context.max);
  }
  function getPercentValueFn(percent) {
    return (0, import_numeric_range3.getPercentValue)(percent, state.context.min, state.context.max, state.context.step);
  }
  return {
    value: state.context.value,
    isDragging,
    isFocused,
    setValue(value) {
      send({ type: "SET_VALUE", value });
    },
    getThumbValue(index) {
      return sliderValue[index];
    },
    setThumbValue(index, value) {
      send({ type: "SET_VALUE", index, value });
    },
    getValuePercent: getValuePercentFn,
    getPercentValue: getPercentValueFn,
    getThumbPercent(index) {
      return getValuePercentFn(sliderValue[index]);
    },
    setThumbPercent(index, percent) {
      const value = getPercentValueFn(percent);
      send({ type: "SET_VALUE", index, value });
    },
    getThumbMin(index) {
      return getRangeAtIndex(state.context, index).min;
    },
    getThumbMax(index) {
      return getRangeAtIndex(state.context, index).max;
    },
    increment(index) {
      send({ type: "INCREMENT", index });
    },
    decrement(index) {
      send({ type: "DECREMENT", index });
    },
    focus() {
      if (!isInteractive)
        return;
      send({ type: "FOCUS", index: 0 });
    },
    labelProps: normalize.label({
      ...parts.label.attrs,
      "data-disabled": (0, import_dom_query2.dataAttr)(isDisabled),
      "data-invalid": (0, import_dom_query2.dataAttr)(isInvalid),
      "data-focus": (0, import_dom_query2.dataAttr)(isFocused),
      id: dom.getLabelId(state.context),
      htmlFor: dom.getHiddenInputId(state.context, 0),
      onClick(event) {
        if (!isInteractive)
          return;
        event.preventDefault();
        dom.getFirstEl(state.context)?.focus();
      },
      style: {
        userSelect: "none"
      }
    }),
    rootProps: normalize.element({
      ...parts.root.attrs,
      "data-disabled": (0, import_dom_query2.dataAttr)(isDisabled),
      "data-orientation": state.context.orientation,
      "data-invalid": (0, import_dom_query2.dataAttr)(isInvalid),
      id: dom.getRootId(state.context),
      dir: state.context.dir,
      style: dom.getRootStyle(state.context)
    }),
    outputProps: normalize.output({
      ...parts.output.attrs,
      "data-disabled": (0, import_dom_query2.dataAttr)(isDisabled),
      "data-invalid": (0, import_dom_query2.dataAttr)(isInvalid),
      id: dom.getOutputId(state.context),
      htmlFor: sliderValue.map((_v, i) => dom.getHiddenInputId(state.context, i)).join(" "),
      "aria-live": "off"
    }),
    trackProps: normalize.element({
      ...parts.track.attrs,
      id: dom.getTrackId(state.context),
      "data-disabled": (0, import_dom_query2.dataAttr)(isDisabled),
      "data-invalid": (0, import_dom_query2.dataAttr)(isInvalid),
      "data-orientation": state.context.orientation,
      "data-focus": (0, import_dom_query2.dataAttr)(isFocused),
      style: { position: "relative" }
    }),
    getThumbProps(index) {
      const value = sliderValue[index];
      const range = getRangeAtIndex(state.context, index);
      const ariaValueText = state.context.getAriaValueText?.(value, index);
      const _ariaLabel = Array.isArray(ariaLabel) ? ariaLabel[index] : ariaLabel;
      const _ariaLabelledBy = Array.isArray(ariaLabelledBy) ? ariaLabelledBy[index] : ariaLabelledBy;
      return normalize.element({
        ...parts.thumb.attrs,
        "data-index": index,
        id: dom.getThumbId(state.context, index),
        "data-disabled": (0, import_dom_query2.dataAttr)(isDisabled),
        "data-orientation": state.context.orientation,
        "data-focus": (0, import_dom_query2.dataAttr)(isFocused && state.context.activeIndex === index),
        draggable: false,
        "aria-disabled": (0, import_dom_query2.ariaAttr)(isDisabled),
        "aria-label": _ariaLabel,
        "aria-labelledby": _ariaLabelledBy ?? dom.getLabelId(state.context),
        "aria-orientation": state.context.orientation,
        "aria-valuemax": range.max,
        "aria-valuemin": range.min,
        "aria-valuenow": sliderValue[index],
        "aria-valuetext": ariaValueText,
        role: "slider",
        tabIndex: isDisabled ? void 0 : 0,
        style: dom.getThumbStyle(state.context, index),
        onBlur() {
          if (!isInteractive)
            return;
          send("BLUR");
        },
        onFocus() {
          if (!isInteractive)
            return;
          send({ type: "FOCUS", index });
        },
        onKeyDown(event) {
          if (!isInteractive)
            return;
          const step = (0, import_dom_event2.getEventStep)(event) * state.context.step;
          let prevent = true;
          const keyMap = {
            ArrowUp() {
              send({ type: "ARROW_UP", step });
              prevent = state.context.isVertical;
            },
            ArrowDown() {
              send({ type: "ARROW_DOWN", step });
              prevent = state.context.isVertical;
            },
            ArrowLeft() {
              send({ type: "ARROW_LEFT", step });
              prevent = state.context.isHorizontal;
            },
            ArrowRight() {
              send({ type: "ARROW_RIGHT", step });
              prevent = state.context.isHorizontal;
            },
            PageUp() {
              send({ type: "PAGE_UP", step });
            },
            PageDown() {
              send({ type: "PAGE_DOWN", step });
            },
            Home() {
              send("HOME");
            },
            End() {
              send("END");
            }
          };
          const key = (0, import_dom_event2.getEventKey)(event, state.context);
          const exec = keyMap[key];
          if (!exec)
            return;
          exec(event);
          if (prevent) {
            event.preventDefault();
            event.stopPropagation();
          }
        }
      });
    },
    getHiddenInputProps(index) {
      return normalize.input({
        ...parts.hiddenInput.attrs,
        name: `${state.context.name}[${index}]`,
        form: state.context.form,
        type: "text",
        hidden: true,
        defaultValue: state.context.value[index],
        id: dom.getHiddenInputId(state.context, index)
      });
    },
    rangeProps: normalize.element({
      id: dom.getRangeId(state.context),
      ...parts.range.attrs,
      "data-focus": (0, import_dom_query2.dataAttr)(isFocused),
      "data-invalid": (0, import_dom_query2.dataAttr)(isInvalid),
      "data-disabled": (0, import_dom_query2.dataAttr)(isDisabled),
      "data-orientation": state.context.orientation,
      style: dom.getRangeStyle(state.context)
    }),
    controlProps: normalize.element({
      ...parts.control.attrs,
      id: dom.getControlId(state.context),
      "data-disabled": (0, import_dom_query2.dataAttr)(isDisabled),
      "data-orientation": state.context.orientation,
      "data-invalid": (0, import_dom_query2.dataAttr)(isInvalid),
      "data-focus": (0, import_dom_query2.dataAttr)(isFocused),
      style: dom.getControlStyle(),
      onPointerDown(event) {
        if (!isInteractive)
          return;
        const evt = (0, import_dom_event2.getNativeEvent)(event);
        if (!(0, import_dom_event2.isLeftClick)(evt) || (0, import_dom_event2.isModifiedEvent)(evt))
          return;
        const point = (0, import_dom_event2.getEventPoint)(evt);
        send({ type: "POINTER_DOWN", point });
        event.preventDefault();
        event.stopPropagation();
      }
    }),
    markerGroupProps: normalize.element({
      ...parts.markerGroup.attrs,
      role: "presentation",
      "aria-hidden": true,
      "data-orientation": state.context.orientation,
      style: dom.getMarkerGroupStyle()
    }),
    getMarkerProps({ value }) {
      const percent = getValuePercentFn(value);
      const style = dom.getMarkerStyle(state.context, percent);
      let markerState;
      if (Math.max(...state.context.value) < value) {
        markerState = "over-value";
      } else if (Math.min(...state.context.value) > value) {
        markerState = "under-value";
      } else {
        markerState = "at-value";
      }
      return normalize.element({
        ...parts.marker.attrs,
        id: dom.getMarkerId(state.context, value),
        role: "presentation",
        "data-orientation": state.context.orientation,
        "data-value": value,
        "data-disabled": (0, import_dom_query2.dataAttr)(isDisabled),
        "data-state": markerState,
        style
      });
    }
  };
}

// src/range-slider.machine.ts
var import_core = require("@zag-js/core");
var import_dom_event3 = require("@zag-js/dom-event");
var import_dom_query3 = require("@zag-js/dom-query");
var import_element_size = require("@zag-js/element-size");
var import_form_utils2 = require("@zag-js/form-utils");
var import_numeric_range4 = require("@zag-js/numeric-range");
var import_utils = require("@zag-js/utils");
function machine(userContext) {
  const ctx = (0, import_utils.compact)(userContext);
  return (0, import_core.createMachine)(
    {
      id: "range-slider",
      initial: "idle",
      context: {
        thumbSizes: [],
        thumbAlignment: "contain",
        threshold: 5,
        activeIndex: -1,
        min: 0,
        max: 100,
        step: 1,
        value: [0, 100],
        initialValues: [],
        orientation: "horizontal",
        dir: "ltr",
        minStepsBetweenThumbs: 0,
        ...ctx
      },
      computed: {
        isHorizontal: (ctx2) => ctx2.orientation === "horizontal",
        isVertical: (ctx2) => ctx2.orientation === "vertical",
        isRtl: (ctx2) => ctx2.orientation === "horizontal" && ctx2.dir === "rtl",
        isInteractive: (ctx2) => !(ctx2.readOnly || ctx2.disabled),
        spacing: (ctx2) => ctx2.minStepsBetweenThumbs * ctx2.step,
        hasMeasuredThumbSize: (ctx2) => ctx2.thumbSizes.length !== 0,
        valuePercent(ctx2) {
          return ctx2.value.map((value) => 100 * (0, import_numeric_range4.getValuePercent)(value, ctx2.min, ctx2.max));
        }
      },
      watch: {
        value: ["invokeOnChange", "dispatchChangeEvent"]
      },
      entry: ["checkValue"],
      activities: ["trackFormControlState", "trackThumbsSize"],
      on: {
        SET_VALUE: [
          {
            guard: "hasIndex",
            actions: "setValueAtIndex"
          },
          { actions: "setValue" }
        ],
        INCREMENT: {
          actions: "incrementAtIndex"
        },
        DECREMENT: {
          actions: "decrementAtIndex"
        }
      },
      states: {
        idle: {
          on: {
            POINTER_DOWN: {
              target: "dragging",
              actions: ["setClosestThumbIndex", "setPointerValue", "invokeOnChangeStart", "focusActiveThumb"]
            },
            FOCUS: {
              target: "focus",
              actions: "setActiveIndex"
            }
          }
        },
        focus: {
          entry: "focusActiveThumb",
          on: {
            POINTER_DOWN: {
              target: "dragging",
              actions: ["setClosestThumbIndex", "setPointerValue", "invokeOnChangeStart", "focusActiveThumb"]
            },
            ARROW_LEFT: {
              guard: "isHorizontal",
              actions: "decrementAtIndex"
            },
            ARROW_RIGHT: {
              guard: "isHorizontal",
              actions: "incrementAtIndex"
            },
            ARROW_UP: {
              guard: "isVertical",
              actions: "incrementAtIndex"
            },
            ARROW_DOWN: {
              guard: "isVertical",
              actions: "decrementAtIndex"
            },
            PAGE_UP: {
              actions: "incrementAtIndex"
            },
            PAGE_DOWN: {
              actions: "decrementAtIndex"
            },
            HOME: {
              actions: "setActiveThumbToMin"
            },
            END: {
              actions: "setActiveThumbToMax"
            },
            BLUR: {
              target: "idle",
              actions: "clearActiveIndex"
            }
          }
        },
        dragging: {
          entry: "focusActiveThumb",
          activities: "trackPointerMove",
          on: {
            POINTER_UP: {
              target: "focus",
              actions: "invokeOnChangeEnd"
            },
            POINTER_MOVE: {
              actions: "setPointerValue"
            }
          }
        }
      }
    },
    {
      guards: {
        isHorizontal: (ctx2) => ctx2.isHorizontal,
        isVertical: (ctx2) => ctx2.isVertical,
        hasIndex: (_ctx, evt) => evt.index != null
      },
      activities: {
        trackFormControlState(ctx2) {
          return (0, import_form_utils2.trackFormControl)(dom.getRootEl(ctx2), {
            onFieldsetDisabled() {
              ctx2.disabled = true;
            },
            onFormReset() {
              if (!ctx2.name)
                return;
              assignArray(ctx2.value, ctx2.initialValues);
            }
          });
        },
        trackPointerMove(ctx2, _evt, { send }) {
          return (0, import_dom_event3.trackPointerMove)(dom.getDoc(ctx2), {
            onPointerMove(info) {
              send({ type: "POINTER_MOVE", point: info.point });
            },
            onPointerUp() {
              send("POINTER_UP");
            }
          });
        },
        trackThumbsSize(ctx2) {
          if (ctx2.thumbAlignment !== "contain")
            return;
          return (0, import_element_size.trackElementsSize)({
            getNodes() {
              return dom.getElements(ctx2);
            },
            observeMutation: true,
            callback(size, index) {
              if (size) {
                ctx2.thumbSizes[index] = size;
              }
            }
          });
        }
      },
      actions: {
        invokeOnChangeStart(ctx2) {
          ctx2.onChangeStart?.({ value: ctx2.value });
        },
        invokeOnChangeEnd(ctx2) {
          ctx2.onChangeEnd?.({ value: ctx2.value });
        },
        invokeOnChange(ctx2) {
          ctx2.onChange?.({ value: ctx2.value });
        },
        dispatchChangeEvent(ctx2) {
          (0, import_dom_query3.raf)(() => {
            dom.dispatchChangeEvent(ctx2);
          });
        },
        setClosestThumbIndex(ctx2, evt) {
          const pointValue = dom.getValueFromPoint(ctx2, evt.point);
          ctx2.activeIndex = getClosestIndex(ctx2, pointValue);
        },
        setActiveIndex(ctx2, evt) {
          ctx2.activeIndex = evt.index;
        },
        clearActiveIndex(ctx2) {
          ctx2.activeIndex = -1;
        },
        setPointerValue(ctx2, evt) {
          const value = dom.getValueFromPoint(ctx2, evt.point);
          if (value == null)
            return;
          ctx2.value[ctx2.activeIndex] = constrainValue(ctx2, value, ctx2.activeIndex);
        },
        focusActiveThumb(ctx2) {
          (0, import_dom_query3.raf)(() => {
            const thumb = dom.getThumbEl(ctx2, ctx2.activeIndex);
            thumb?.focus();
          });
        },
        decrementAtIndex(ctx2, evt) {
          const nextValue = decrement(ctx2, evt.index, evt.step);
          assignArray(ctx2.value, nextValue);
        },
        incrementAtIndex(ctx2, evt) {
          const nextValue = increment(ctx2, evt.index, evt.step);
          assignArray(ctx2.value, nextValue);
        },
        setActiveThumbToMin(ctx2) {
          const { min } = getRangeAtIndex(ctx2, ctx2.activeIndex);
          ctx2.value[ctx2.activeIndex] = min;
        },
        setActiveThumbToMax(ctx2) {
          const { max } = getRangeAtIndex(ctx2, ctx2.activeIndex);
          ctx2.value[ctx2.activeIndex] = max;
        },
        checkValue(ctx2) {
          const nextValue = normalizeValues(ctx2, ctx2.value);
          assignArray(ctx2.value, nextValue);
          assignArray(ctx2.initialValues, nextValue);
        },
        setValueAtIndex(ctx2, evt) {
          ctx2.value[evt.index] = constrainValue(ctx2, evt.value, evt.index);
        },
        setValue(ctx2, evt) {
          assignArray(ctx2.value, normalizeValues(ctx2, evt.value));
        }
      }
    }
  );
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  anatomy,
  connect,
  machine
});
//# sourceMappingURL=index.js.map